
#Setting up passwordless ssh from Ansible_server to clients
#Ansible facts
#Introduction to YAML file
#Creating first playbooks
#Setting log_path in ansible
#Module reference 
#Dry Run of playbooks
#Playbooks with variables
#Tags
#extra variables
#variables precedence


#Setting up passwordless ssh
>>Execute below command from Ansible server
>>Replace all with client IP
ssh-copy-id anand@<ClientIP>
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/anand/.ssh/id_rsa.pub"
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
anand@192.168.1.15's password:



#Ansible facts
Ansible facts are nothing but system properties or pieces of information about remote nodes that you have connected to. This information includes the System architecture, the OS version, BIOS information, system time and date, system uptime, IP address, and hardware information to mention just a few.

Ansible facts are handy in helping the system administrators which operations to carry out, for instance, depending on the operating system, they are able to know which software packages need to be installed, and how they are to be configured, etc


 ansible all  -m setup

 ansible all -m setup
192.168.150.129 | SUCCESS => {
    "ansible_facts": {
        "ansible_all_ipv4_addresses": [
            "192.168.150.129"
        ],
        "ansible_all_ipv6_addresses": [
            "fe80::20c:29ff:fee2:3d02"
        ],
        "ansible_apparmor": {
            "status": "enabled"
        },
        "ansible_architecture": "x86_64",
        "ansible_bios_date": "07/31/2013",
        "ansible_bios_version": "6.00",
        "ansible_cmdline": {
            "BOOT_IMAGE": "/boot/vmlinuz-3.13.0-24-generic",
            "find_preseed": "/preseed.cfg",
            "noprompt": true,
            "quiet": true,
            "ro": true,
            "root": "UUID=715c9efe-0f8f-42fc-9515-4b0dc0e64854"
        },

.................................
..................................


Use case:
While deploying a NTP application/hosts file

<html>
<center>
   <h1> The hostname of this webserver is {{ ansible_hostname }}</h1>
   <h3> It is running on {{ ansible_os_family}}system </h3>
</center>
</html>


 Facts section data:
 ansible_architecture
ansible_bios_date
ansible_bios_version
ansible_date_time
ansible_machine
ansible_memefree_mb
ansible_os_family
ansible_selinux

using filters
ansible localhost  -m setup -a "filter=ansible_distribution*"
ansible localhost -m setup -a "filter=*ip*"




ansibleuser@ubuntu-master:~/playbooks$ ansible localhost  -m setup -a "filter=ansible_distribution*"
localhost | SUCCESS => {
    "ansible_facts": {
        "ansible_distribution": "Ubuntu",
        "ansible_distribution_file_parsed": true,
        "ansible_distribution_file_path": "/etc/os-release",
        "ansible_distribution_file_variety": "Debian",
        "ansible_distribution_major_version": "14",
        "ansible_distribution_release": "trusty",
        "ansible_distribution_version": "14.04"
    },
    "changed": false
}
ansibleuser@ubuntu-master:~/playbooks$ ansible localhost  -m setup -a "filter=ansible_selinux*"
localhost | SUCCESS => {
    "ansible_facts": {
        "ansible_selinux": {
            "status": "Missing selinux Python library"
        },
        "ansible_selinux_python_present": false
    },
    "changed": false
}





##Creating custom facts
#mkdir -p /etc/ansible/facts.d
# vim /etc/ansible/facts.d/date_time.fact

#!/bin/bash
DATE=`date`
echo "{\"date\" : \"${DATE}\"}"

chmod +x /etc/ansible/facts.d/date_time.fact

ansible localhost -m setup | grep date
        "ansible_bios_date": "07/31/2013",
        "ansible_date_time": {
            "date": "2021-01-12",


YAML
 Ansible uses YAML because it is very easy for humans to understand, read and write when compared to other data formats like XML and JSON
 YAML uses simple key-value pair to represent the data.

 Example:- A student record:
--- #Optional YAML start syntax 
james: 
  name: james john 
  rollNo: 34 
  div: B 
  sex: male

## Representing a list
 ---
countries:  
   - America 
   - China 
   - Canada 
   - Iceland

## With dictonary 

james: 
   name: james john 
   rollNo: 34 
   div: B 
   sex: male 
   likes: 
      - maths 
      - physics 
      - english


#Setting log_path for ansible 
logpath is more like saving the ansible execution logs to log file , by default logs are not saved in any of the 

set the log_path variable in ansible configration file 
books$ grep log_path /etc/ansible/ansible.cfg
log_path = /var/log/ansible.log

#Make sure it has right permission to the file

if the above method didt work follow this:-
# sudo touch /var/log/ansible.log
#sudo groupadd ansible
# sudo chown root:ansible /var/log/ansible.log
# sudo chmod 775 /var/log/ansible.log
# sudo usermod sudeep -aG ansible
You need to signout and sign in before executing the playbook.


###Syntax Check and Dry Run of playbooks
----------------------------
Syntax Check
ansible-playbook playbooks/PLAYBOOK_NAME.yml --syntax-check

DryRun
Check mode is just a simulation, and if you have steps that use conditionals that depend on the results of prior commands, it may be less useful for you. However it is great for one-node-at-time basic configuration management use case

ansible-playbook  WithItemMultiPathFileCopy.yaml  --check




Variable precedence
--------------------
1.-e switch 
2. vars in role
3. vars in play
4. hosts vars
5. groups vars
6 defaults in role

1. being the heighest precedence and 6.Being the lowest precedence







##Tags
ansible-playbook playbooks/PLAYBOOK_NAME.yml --tags 'install'
ansible-playbook playbooks/PLAYBOOK_NAME.yml --skip-tags 'sudoers'
