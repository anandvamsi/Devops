#Ansible Roles :- More like refactor the playbooks

Roles provide a framework for fully independent, or interdependent collections of variables, tasks, files, templates, and modules.
Primary mechanism is to for breakinga playbook into multiple files; This simplifies writing complex playbook and makes it earlier to resues.
we can

Roles is basically limited to a particular functionlity or destired o/p
Roles are small functionlity which 

#Command to create a role
ansible-galaxy init <rolename>

Directory structure of he role
-------------------------------
defaults –  Includes default values for variables of the role. Here we define some sane default variables, but they have the lowest priority and are usually overridden by other methods to customize the role.
files  – Contains static and custom files that the role uses to perform various tasks.
handlers – A set of handlers that are triggered by tasks of the role. 
meta – Includes metadata information for the role, its dependencies, the author, license, available platform, etc.
tasks – A list of tasks to be executed by the role. This part could be considered similar to the task section of a playbook.
templates – Contains Jinja2 template files used by tasks of the role.
tests – Includes configuration files related to role testing.
vars – Contains variables defined for the role. These have quite a high precedence in Ansible.

----
Usually roles are created inside the role directory
- hosts: all
  roles:
    - role: "<name of the role>"

Example:

- hosts: all 
  roles:
    - role: webserver
    

#passing variables with roles
- hosts: testdroplets
  roles:
    - update
    - bootstrap_server
    - { role: create_new_user, username: 'foobar' }
    - vimserver
    
    
 #setting facts for all the roles
- hosts: testdroplets
  pre_tasks:
    - set_fact:
        username: my_username
  roles:
    - update
    - bootstrap_server
    - create_new_user
    - vimserver
